## Explore bullying by gender/race - basis of race, color, national origin

if __name__ == "__main__":
    import pandas as pd
    import numpy as np
    data = pd.read_csv("data/CRDC2013_14.csv", encoding = "Latin-1")
    
    ## get rid of faulty data
    ## print(data["TOT_HBREPORTED_RAC_M"].value_counts())
    ## print(data["TOT_HBDISCIPLINED_RAC_M"].value_counts())
    data = data.replace(value = 0, to_replace = -9)
    data = data.replace(value = 0, to_replace = -5)
    
    ## create categories interested
    races = ["HI", "AM", "AS", "HP", "BL", "WH", "TR"]
    genders = ["F", "M"]
    
    ## add a total_bully, total_bullied column, and compile all_bully, all_bullied
    data["total_bully"] = data["TOT_HBDISCIPLINED_RAC_M"] + data["TOT_HBDISCIPLINED_RAC_F"]
    all_bully = data["total_bully"].sum()
    
    data["total_bullied"] = data["TOT_HBREPORTED_RAC_M"] + data["TOT_HBREPORTED_RAC_F"]
    all_bullied = data["total_bullied"].sum()

    ## create dictionary for totals to store distribution of each race
    totals = {}
    for race in races:
        race_f_bully = "SCH_HBDISCIPLINED_RAC_" + race + "_" + genders[0]
        race_m_bully = "SCH_HBDISCIPLINED_RAC_" + race + "_" + genders[1]
        total_race = "total_" + race + "_bully"
        totals[total_race] = (data[race_m_bully].sum() + data[race_f_bully].sum()) / all_bully
        
        race_f_bullied = "SCH_HBREPORTED_RAC_" + race + "_" + genders[0]
        race_m_bullied = "SCH_HBREPORTED_RAC_" + race + "_" + genders[1]
        total_race = "total_" + race + "_bullied"
        totals[total_race] = (data[race_m_bullied].sum() + data[race_f_bullied].sum()) / all_bullied
        
    ## add genders for completion
    totals["TOT_HBDISCIPLINED_RAC_M"] = data["TOT_HBDISCIPLINED_RAC_M"].sum() / all_bully
    totals["TOT_HBDISCIPLINED_RAC_F"] = data["TOT_HBDISCIPLINED_RAC_F"].sum() / all_bully
    
    totals["TOT_HBREPORTED_RAC_M"] = data["TOT_HBREPORTED_RAC_M"].sum() / all_bullied
    totals["TOT_HBREPORTED_RAC_F"] = data["TOT_HBREPORTED_RAC_F"].sum() / all_bullied
    
    for k,v in totals.items():
        print (k, v)
        













## Explore enrollments by gender/race

if __name__ == "__main__":
    import pandas as pd
    ## add numpy
    import numpy as np
    data = pd.read_csv("data/CRDC2013_14.csv", encoding = "Latin-1")
    
    ## create categories interested
    races = ["HI", "AM", "AS", "HP", "BL", "WH", "TR"]
    genders = ["F", "M"]
    
    ## add a total_enrollment column, and compile all_enrollment
    data["total_enrollment"] = data["TOT_ENR_M"] + data["TOT_ENR_F"]
    all_enrollment = data["total_enrollment"].sum()

    ## create dictionary for totals to store distribution of each race
    totals = {}
    for race in races:
        race_f = "SCH_ENR_" + race + "_" + genders[0]
        race_m = "SCH_ENR_" + race + "_" + genders[1]
        total_race = "total_" + race 
        totals[total_race] = (data[race_m].sum() + data[race_f].sum()) / all_enrollment
        
    ## add genders for completion
    totals["TOT_ENR_M"] = data["TOT_ENR_M"].sum() / all_enrollment
    totals["TOT_ENR_F"] = data["TOT_ENR_F"].sum() / all_enrollment
    
    for k,v in totals.items():
        print (k, v)
        
















##Explore JJ an SCH_STATUS_MAGNET columns

if __name__ == "__main__":
    import pandas as pd
    data = pd.read_csv("data/CRDC2013_14.csv", encoding = "Latin-1")
    
    ##get more information
    jj_counts = data["JJ"].value_counts()
    sch_status_magnet_counts = data["SCH_STATUS_MAGNET"].value_counts()
    
    #print(jj_counts)
    #print(sch_status_magnet_counts)
    
    #Binary data! We can run a pivot table
    jj_pivot = pd.pivot_table(data, values=["TOT_ENR_M", "TOT_ENR_F"], index="JJ", aggfunc="sum")
    
    sch_status_magnet_pivot = pd.pivot_table(data, values=["TOT_ENR_M", "TOT_ENR_F"], index="SCH_STATUS_MAGNET", aggfunc="sum")
    
    print(jj_pivot)
    print(sch_status_magnet_pivot)
    
















## Explore expulsions by gender/race

if __name__ == "__main__":
    import pandas as pd
    import numpy as np
    data = pd.read_csv("data/CRDC2013_14.csv", encoding = "Latin-1")
    
    ## get rid of faulty data
    ## print(data["TOT_DISCWODIS_EXPZT_M"].value_counts())
    data = data.replace(value = 0, to_replace = -9)
    
    ## create categories interested
    races = ["HI", "AM", "AS", "HP", "BL", "WH", "TR"]
    genders = ["F", "M"]
    
    ## add a total_expulsion column, and compile all_expulsion
    data["total_expulsion"] = data["TOT_DISCWODIS_EXPZT_M"] + data["TOT_DISCWODIS_EXPZT_F"]
    all_expulsion = data["total_expulsion"].sum()

    ## create dictionary for totals to store distribution of each race
    totals = {}
    for race in races:
        race_f = "SCH_DISCWODIS_EXPZT_" + race + "_" + genders[0]
        race_m = "SCH_DISCWODIS_EXPZT_" + race + "_" + genders[1]
        total_race = "total_" + race 
        totals[total_race] = (data[race_m].sum() + data[race_f].sum()) / all_expulsion
        
    ## add genders for completion
    totals["TOT_DISCWODIS_EXPZT_M"] = data["TOT_DISCWODIS_EXPZT_M"].sum() / all_expulsion
    totals["TOT_DISCWODIS_EXPZT_F"] = data["TOT_DISCWODIS_EXPZT_F"].sum() / all_expulsion
    
    for k,v in totals.items():
        print (k, v)


















## Explore gifted enrollment by gender/race

if __name__ == "__main__":
    import pandas as pd
    import numpy as np
    data = pd.read_csv("data/CRDC2013_14.csv", encoding = "Latin-1")
    
    ## get rid of faulty data
    ## print(data["TOT_GTENR_M"].value_counts())
    data = data.replace(value = 0, to_replace = -9)
    
    ## create categories interested
    races = ["HI", "AM", "AS", "HP", "BL", "WH", "TR"]
    genders = ["F", "M"]
    
    ## add a total_gifted column, and compile all_gifted
    data["total_gifted"] = data["TOT_GTENR_M"] + data["TOT_GTENR_F"]
    all_gifted = data["total_gifted"].sum()

    ## create dictionary for totals to store distribution of each race
    totals = {}
    for race in races:
        race_f = "SCH_GTENR_" + race + "_" + genders[0]
        race_m = "SCH_GTENR_" + race + "_" + genders[1]
        total_race = "total_" + race 
        totals[total_race] = (data[race_m].sum() + data[race_f].sum()) / all_gifted
        
    ## add genders for completion
    totals["TOT_GTENR_M"] = data["TOT_GTENR_M"].sum() / all_gifted
    totals["TOT_GTENR_F"] = data["TOT_GTENR_F"].sum() / all_gifted
    
    for k,v in totals.items():
        print (k, v)
        
























## Explore magnet school distribution by gender/race

if __name__ == "__main__":
    import pandas as pd
    import numpy as np
    data = pd.read_csv("data/CRDC2013_14.csv", encoding = "Latin-1")
    
    ## get magnet information - binary column
    ## print(data["SCH_STATUS_MAGNET"].value_counts())
    
    ## create categories interested
    races = ["HI", "AM", "AS", "HP", "BL", "WH", "TR"]
    genders = ["F", "M"]
    
    ## create separate YES/NO dataframes
    magnet = data[data["SCH_STATUS_MAGNET"] == "YES"]
    no_magnet = data[data["SCH_STATUS_MAGNET"] == "NO"]
    
    ## add a total_magnet, and compile all_magnet for each 
    data["total_magnet"] = magnet["TOT_ENR_M"] + magnet["TOT_ENR_F"]
    all_magnet = data["total_magnet"].sum()
                     
    data["total_no_magnet"] = no_magnet["TOT_ENR_M"] + no_magnet["TOT_ENR_F"]
    all_no_magnet = data["total_no_magnet"].sum()

    ## create dictionary for totals to store distribution of each race
    totals = {}
    for race in races:
        race_f = "SCH_ENR_" + race + "_" + genders[0]
        race_m = "SCH_ENR_" + race + "_" + genders[1]
        total_race = "total_" + race + "_magnet"
        totals[total_race] = (magnet[race_m].sum() + magnet[race_f].sum()) / all_magnet

        total_race = "total_" + race + "_no_magnet"
        totals[total_race] = (no_magnet[race_m].sum() + no_magnet[race_f].sum()) / all_no_magnet
        
    ## add genders for completion
    totals["TOT_ENR_M_magnet"] = magnet["TOT_ENR_M"].sum() / all_magnet
    totals["TOT_ENR_F_magnet"] = magnet["TOT_ENR_F"].sum() / all_magnet
                     
    totals["TOT_ENR_M_no_magnet"] = no_magnet["TOT_ENR_M"].sum() / all_no_magnet
    totals["TOT_ENR_F_no_magnet"] = no_magnet["TOT_ENR_F"].sum() / all_no_magnet
    
    for k,v in totals.items():
        print (k, v)























## Explore preschool enrollment by gender/race

if __name__ == "__main__":
    import pandas as pd
    import numpy as np
    data = pd.read_csv("data/CRDC2013_14.csv", encoding = "Latin-1")
    
    ## get rid of faulty data
    ## print(data["TOT_PSENR_M"].value_counts())
    data = data.replace(value = 0, to_replace = -9)
    
    ## create categories interested
    races = ["HI", "AM", "AS", "HP", "BL", "WH", "TR"]
    genders = ["F", "M"]
    
    ## add a total_pre column, and compile all_pre
    data["total_pre"] = data["TOT_PSENR_M"] + data["TOT_PSENR_F"]
    all_pre = data["total_pre"].sum()

    ## create dictionary for totals to store distribution of each race
    totals = {}
    for race in races:
        race_f = "SCH_PSENR_" + race + "_" + genders[0]
        race_m = "SCH_PSENR_" + race + "_" + genders[1]
        total_race = "total_" + race 
        totals[total_race] = (data[race_m].sum() + data[race_f].sum()) / all_pre
        
    ## add genders for completion
    totals["TOT_PSENR_M"] = data["TOT_PSENR_M"].sum() / all_pre
    totals["TOT_PSENR_F"] = data["TOT_PSENR_F"].sum() / all_pre
    
    for k,v in totals.items():
        print (k, v)
        





















##Reads the content of the CRDC2013_14content.csv file and observes the column names

if __name__ == "__main__":
    import pandas as pd
    contents = pd.read_csv("dCRDC2013_14content.csv")
    print(contents.info)
    print(contents.head())
    ## A lot of columns! It looks like the header is not the only the column names but the column descriptions. Every row represents a column. We see two interesting ones: "JJ" and "SCH_STATUS_MAGNET"












## Explore SAT Participation by gender/race

if __name__ == "__main__":
    import pandas as pd
    import numpy as np
    data = pd.read_csv("data/CRDC2013_14.csv", encoding = "Latin-1")
    
    ## get rid of faulty data
    ## print(data["TOT_SATACT_M"].value_counts())
    data = data.replace(value = 0, to_replace = -9)
    
    ## create categories interested
    races = ["HI", "AM", "AS", "HP", "BL", "WH", "TR"]
    genders = ["F", "M"]
    
    ## add a total_sat column, and compile all_sat
    data["total_sat"] = data["TOT_SATACT_M"] + data["TOT_SATACT_F"]
    all_sat = data["total_sat"].sum()

    ## create dictionary for totals to store distribution of each race
    totals = {}
    for race in races:
        race_f = "SCH_SATACT_" + race + "_" + genders[0]
        race_m = "SCH_SATACT_" + race + "_" + genders[1]
        total_race = "total_" + race 
        totals[total_race] = (data[race_m].sum() + data[race_f].sum()) / all_sat
        
    ## add genders for completion
    totals["TOT_SATACT_M"] = data["TOT_SATACT_M"].sum() / all_sat
    totals["TOT_SATACT_F"] = data["TOT_SATACT_F"].sum() / all_sat
    
    for k,v in totals.items():
        print (k, v)